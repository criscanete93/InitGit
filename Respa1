  private MigrationDesktopLoginDTO SetDesktopIndentityData(string computerName)
        {
            var facilityID = GetArrivalPointFacilityID(computerName);
            var dateT = CrossCutting.TimeGenerator.TimeProvider.NowUtc;
            var localDate = ConvertToFacilityDate(facilityID, dateT, "UTC");
            var arribalPointData = new ArrivalPointData().GetDeviceLoginData(computerName);
            var season = new SeasonConfigurationData().GetTodaySeasonTemplate(facilityID, localDate);
            var slotCapacityFacility = new List<SlotCapacityFacilityDTO>();
            var slotCapacityTask = Task.Factory.StartNew(() => { slotCapacityFacility = GetCapacityFamilyByDay(facilityID);  });

            var genders = new GenderData().GetAll(migrationDTO.FacilityDTO.LocalizationsSettings.LanguageCode);
            var visitorTypes = new VisitorTypeRule().GetByFacilityAndGlobals(facility, migrationDTO.FacilityDTO.LocalizationsSettings.LanguageCode);
            var groupTypes = new GroupTypeData().GetAllByLanguage(migrationDTO.FacilityDTO.LocalizationsSettings.LanguageCode);
            var productRentals = new ProductData().GetProductsForRentalByStore(migrationDTO.FacilityDTO.FacilityID, migrationDTO.Store.StoreID, new Guid(BaseEnum.GetGuidValue(ProductCategoryEnum.Services).ToString()));
            var slotCapacityFacilities = new CapacityConfigurationRule().GetCapacityFamilyByDay(facility, configurationTimeZone.Now);

            return new MigrationDesktopLoginDTO()
            {
                CountersAssigmentDTO = migrationDTO.CountersAssigmentDTO,
                FacilityDTO = migrationDTO.FacilityDTO,
                SeasonDTO = season,
                GroupTypes = groupTypes.ToList(),
                Genders = genders.ToList(),
                Languages = migrationDTO.Languages,
                VisitorTypes = visitorTypes.ToList(),
                Store = migrationDTO.Store ?? new StoreDTO(),
                ProductRentals = productRentals.ToList(),
                SlotCapacityFacilities = slotCapacityFacilities.Item1.ToList()
            };
        }
		
		  public Tuple<MigrationDesktopLoginDTO, Dictionary<string, string>> GetDesktopLoginData(string computerName, DateTime date)
        {
            var errors = ValidateDesktopInputParameters(computerName);
            MigrationDesktopLoginDTO result = null;

            if (!CanDoAction(errors))
                return new Tuple<MigrationDesktopLoginDTO, Dictionary<string, string>>(null, errors);

            result = SetDesktopIndentityData(computerName); 
            ValidateDesktopLoginIntiData(result, errors);

            if (!CanDoAction(errors))
                result = null;

            return new Tuple<MigrationDesktopLoginDTO, Dictionary<string, string>>(result, errors);
        }