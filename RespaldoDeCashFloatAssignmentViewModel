using KZoftware.CrossCutting.Monads;
using KZoftware.Desktop.Utilities.Extras;
using KZoftware.Desktop.Utilities.Handlers;
using KZoftware.Desktop.Utilities.ViewModels;
using KZoftware.Desktop.PointOfSales.Models.Cash;
using KZoftware.Desktop.PointOfSales.Models.Season;
using KZoftware.Entities.DTO.ServiceFault;
using KZoftware.Entities.Enumerators;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.ServiceModel;
using System.Windows.Input;
using System.Windows.Threading;

namespace KZoftware.Desktop.PointOfSales.ViewModels.Modals
{
    /// <summary>
    /// Clase de asignacion de fondos
    /// </summary>
    public class CashFloatAssignmentViewModel : BaseViewModel
    {
        #region Properties
        private List<Season> _seasons;
        public List<Season> Seasons
        {
            get => _seasons;
            set
            {
                if (_seasons == value)
                    return;
                _seasons = value;
                OnPropertyChanged(nameof(Seasons));
            }
        }

        private Season _selectSeason;
        public Season SelectSeason
        {
            get => _selectSeason;
            set
            {
                if (_selectSeason == value)
                    return;
                _selectSeason = value;
                OnPropertyChanged(nameof(SelectSeason));
            }
        }

        private Dictionary<CashLocationTypeEnum, string> _cashLocationTypeSource;
        public Dictionary<CashLocationTypeEnum, string> CashLocationTypeSource
        {
            get => _cashLocationTypeSource;
            set
            {
                if (_cashLocationTypeSource == value)
                    return;
                _cashLocationTypeSource = value;
                OnPropertyChanged(nameof(CashLocationTypeSource));
            }
        }

        private ObservableCollection<StoreOrEstablishment> _storeOrEstablishment;
        public ObservableCollection<StoreOrEstablishment> StoreOrEstablishment
        {
            get => _storeOrEstablishment;
            set
            {
                if (_storeOrEstablishment == value)
                    return;
                _storeOrEstablishment = value;
                OnPropertyChanged(nameof(StoreOrEstablishment));
            }
        }

        private CashCollection _collectionView;
        public CashCollection CollectionView
        {
            get => _collectionView;
            set
            {
                if (_collectionView == value)
                    return;
                _collectionView = value;
                OnPropertyChanged(nameof(CollectionView));
            }
        }

        private List<CashTemplate> _cashTemplates;
        public List<CashTemplate> CashTemplates
        {
            get => _cashTemplates;
            set
            {
                if (_cashTemplates == value)
                    return;
                _cashTemplates = value;
                OnPropertyChanged(nameof(CashTemplates));
            }
        }

        private CashLocationTypeEnum _selectCashLocationType;
        public CashLocationTypeEnum SelectCashLocationType
        {
            get => _selectCashLocationType;
            set
            {
                if (_selectCashLocationType == value)
                    return;
                _selectCashLocationType = value;
                OnPropertyChanged(nameof(SelectCashLocationType));
                ResetSources();
                LoadLocationType();
            }
        }

        private StoreOrEstablishment _selectStoreOrEstablishment;
        public StoreOrEstablishment SelectStoreOrEstablishment
        {
            get => _selectStoreOrEstablishment;
            set
            {
                if (_selectStoreOrEstablishment == value)
                    return;
                _selectStoreOrEstablishment = value;
                OnPropertyChanged(nameof(SelectStoreOrEstablishment));

                if (_selectStoreOrEstablishment != null && _selectStoreOrEstablishment.TypeID != Guid.Empty)
                    LoadTemplateAll();
            }
        }

        private CashTemplate _selectCashTemplate;
        public CashTemplate SelectCashTemplate
        {
            get => _selectCashTemplate;
            set
            {
                if (_selectCashTemplate == value)
                    return;
                _selectCashTemplate = value;
                OnPropertyChanged(nameof(SelectCashTemplate));

                if(_selectCashTemplate != null && _selectCashTemplate.CurrencyID != Guid.Empty)
                    LoadCollecition();
            }
        }

        private string _symbol;
        public string Symbol
        {
            get => _symbol;
            set
            {
                if (_symbol == value)
                    return;
                _symbol = value;
                OnPropertyChanged(nameof(Symbol));
            }
        }
        #endregion

        #region Command
        private readonly RelayCommand _showValidateCrendential;
        public ICommand ShowValidateCrendential => _showValidateCrendential;
        #endregion

        #region Command Methods
        private void ShowCredentials(object parameter)
        {
                
        }
        #endregion

        #region Methods private

        private void InitSources()
        {
            _cashLocationTypeSource = new Dictionary<CashLocationTypeEnum, string>
            {
                { 0, TranslationViewModel.Instance.UILabels.SelectAnOption},
                { CashLocationTypeEnum.PointOfSales,  TranslationViewModel.Instance.UILabels.PointOfSales },
                { CashLocationTypeEnum.Establishment, TranslationViewModel.Instance.UILabels.Establishment }
            };

            StoreOrEstablishment = new ObservableCollection<StoreOrEstablishment>();
            StoreOrEstablishment.Insert(0, new StoreOrEstablishment(Guid.Empty, TranslationViewModel.Instance.UILabels.SelectAnOption));

            CashTemplates = new List<CashTemplate>();
            CashTemplates.Insert(0, new CashTemplate { CurrencyID = Guid.Empty, CashFloatTemplateName = TranslationViewModel.Instance.UILabels.SelectAnOption });

            CollectionView = new CashCollection();

            Symbol = string.Empty;
        }

        private void InitSourceCash()
        {
            try
            {
                var dispatcher = Dispatcher.CurrentDispatcher;
                LoadingHandler.PerformLongTask(dispatcher, (Action)(() =>
                {
                    GetSeasonsCash().OnSuccess((value) =>
                        {
                            value.Insert(0, new Season
                            {
                                SeasonTypeID = Guid.Empty,
                                SeasonTypeName = TranslationViewModel.Instance.UILabels.SelectAnOption,
                            });

                            Seasons = new List<Season>(value);
                        })
                        .OnFailure((errors) =>
                        {
                            dispatcher.BeginInvoke((Action)(() => ModalHandler.ShowMessageBox(errors)));
                        });
                }));
            }
            catch (Exception ex)
            {
                ExceptionHandler.Handle(ex);
            }
        }

        private void LoadLocationType()
        {
            try
            {
                List<StoreOrEstablishment> collecion = new List<StoreOrEstablishment>();
                SelectStoreOrEstablishment = null;
                var dispatcher = Dispatcher.CurrentDispatcher;
                LoadingHandler.PerformLongTask(dispatcher, (Action)(() =>
                {
                    WCFProxy.Using(delegate (FloatIssuanceManagementService.IFloatIssuanceManagementService client)
                    {
                        switch (SelectCashLocationType)
                        {
                            case CashLocationTypeEnum.PointOfSales:
                                {
                                    var responseStore = client.GetAllStoreByFacility(FacilityViewModel.Instance.FacilityID);
                                    if (responseStore != null && responseStore.Any())
                                        collecion = responseStore.Select(s => new StoreOrEstablishment(s.StoreID, s.StoreName)).ToList();
                                }
                                break;
                            case CashLocationTypeEnum.Establishment:
                                {
                                    var response = client.GetAllEstablishmentByFacility(FacilityViewModel.Instance.FacilityID);
                                    if (response != null && response.Any())
                                        collecion = response.Select(s => new StoreOrEstablishment(s.EstablishmentID, s.LocalName)).ToList();
                                }
                                break;
                            default:
                                break;
                        }

                        StoreOrEstablishment = new ObservableCollection<StoreOrEstablishment>(collecion);
                        StoreOrEstablishment.Insert(0, new StoreOrEstablishment(Guid.Empty, TranslationViewModel.Instance.UILabels.SelectAnOption));
                        SelectStoreOrEstablishment = StoreOrEstablishment.First();
                    });
                }));

                
            }
            catch (Exception ex)
            {
                ExceptionHandler.Handle(ex);
            }
        }

        private void LoadTemplateAll()
        {
            try
            {
                var dispatcher = Dispatcher.CurrentDispatcher;
                LoadingHandler.PerformLongTask(dispatcher, (Action)(() =>
                {
                    GetTemplateAll().OnSuccess((value) => 
                    {
                        value.Insert(0, new CashTemplate { CashFloatTemplateID = Guid.Empty, CashFloatTemplateName = TranslationViewModel.Instance.UILabels.SelectAnOption });
                        CashTemplates = new List<CashTemplate>(value);
                        SelectCashTemplate = CashTemplates.First();
                    }).OnFailure((errors) => 
                    {
                        if(errors != null)
                            dispatcher.BeginInvoke((Action)(() => ModalHandler.ShowMessageBox(errors)));
                    });
                }));
            }
            catch (Exception ex)
            {
                ExceptionHandler.Handle(ex);
            }
        }

        private void LoadCollecition()
        {
            try
            {
                var dispatcher = Dispatcher.CurrentDispatcher;
                LoadingHandler.PerformLongTask(dispatcher, (Action)(() =>
                {
                    GetCollection().OnSuccess((value) =>
                    {
                        CollectionView = value;
                        Symbol = value.CashBills.Select(s => s.Symbol).FirstOrDefault();
                        OnPropertyChanged(nameof(CollectionView));

                    }).OnFailure((error) => 
                    {
                        dispatcher.BeginInvoke((Action)(() => ModalHandler.ShowMessageBox(error)));
                    });
                }));
            }
            catch (Exception ex)
            {
                ExceptionHandler.Handle(ex);
            }
            //ResumeCashTemplateDTO
        }

        private void ResetSources()
        {
            SelectStoreOrEstablishment = StoreOrEstablishment.First();
            SelectCashTemplate = CashTemplates.First();
        }

        private Result<List<Season>> GetSeasonsCash()
        {
            Result<List<Season>> result = new Result<List<Season>>();
            try
            {
                WCFProxy.Using(delegate (InitCashManagementService.IInitCashManagementViewService client)
                {
                    var response = client.InitFloatTemplateView(GeneralViewModel.Instance.FacilityLanguageCode);
                    if (response.IsSuccess)
                        result = new Result<List<Season>>(SetListSeasons(response.Value.SeasonType), response.ErrorList);
                    else
                        result = new Result<List<Season>>(null, response.ErrorList);
                });
            }
            catch (FaultException<ServiceFaultDTO> ex)
            {
                var errors = new Dictionary<string, string> { { TranslationViewModel.Instance.UILabels.RequestsFaild,
                                                                ex.Detail.ErrorMessage } };
                result = new Result<List<Season>>(null, errors);
            }

            return result;
        }

        private Result<List<CashTemplate>> GetTemplateAll()
        {
            Result<List<CashTemplate>> result = new Result<List<CashTemplate>>(); ;
            if (SelectSeason.SeasonTypeID != Guid.Empty)
            {
                try
                {
                    WCFProxy.Using(delegate (FloatTemplateManagementService.IFloatTemplateManagementService client)
                    {
                       var response = client.GetAllTemplateByType(SelectStoreOrEstablishment.TypeID, SelectSeason.SeasonTypeID);
                        if (response != null && response.Any())
                            result = new Result<List<CashTemplate>>(response.Select(s => new CashTemplate(s)).ToList(), new Dictionary<string, string>());
                    });
                }
                catch (FaultException<ServiceFaultDTO> ex)
                {
                    var errors = new Dictionary<string, string> { { TranslationViewModel.Instance.UILabels.RequestsFaild,
                                                                ex.Detail.ErrorMessage } };
                    result = new Result<List<CashTemplate>>(null, errors);
                }
            }

            return result;
        }

        private Result<CashCollection> GetCollection()
        {
            Result<CashCollection> result = new Result<CashCollection>();
            try
            {
                WCFProxy.Using(delegate (FloatTemplateManagementService.IFloatTemplateManagementService client)
                {
                    var response = client.GetTemplateDetails(SelectStoreOrEstablishment.TypeID, SelectSeason.SeasonTypeID, SelectCashTemplate.CashFloatTemplateID);
                    if (response.IsSuccess)
                        result = new Result<CashCollection>(new CashCollection(response.Value), response.ErrorList);
                    else
                        result = new Result<CashCollection>(null, result.ErrorList);
                });
            }
            catch (FaultException<ServiceFaultDTO> ex)
            {
                var errors = new Dictionary<string, string> { { TranslationViewModel.Instance.UILabels.RequestsFaild,
                                                                ex.Detail.ErrorMessage } };
                result = new Result<CashCollection>(null, errors);
            }
            return result;
        }

        private List<Season> SetListSeasons(List<InitCashManagementService.SeasonTypeDTO> seasonTypeDTOs)
        {
            return seasonTypeDTOs.Select(s => new Season
            {
                SeasonTypeID = s.SeasonTypeID,
                SeasonTypeName = s.SeasonTypeName
            }).ToList();
        }

        #endregion

        #region Construct
        public CashFloatAssignmentViewModel()
        {
            InitSources();
            InitSourceCash();
            _showValidateCrendential = new RelayCommand(ShowCredentials);
        }
        #endregion
    }
}
